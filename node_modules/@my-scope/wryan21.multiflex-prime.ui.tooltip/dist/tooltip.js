"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const react_1 = __importStar(require("react"));
const tooltip_module_scss_1 = __importDefault(require("./tooltip.module.scss"));
/*
* Core React Tooltip specification
*/
function Tooltip({ text, hidden = false, aria = "" }) {
    // reference to the 
    let ref = (0, react_1.useRef)(null);
    // determine the x, y, width, height of the tooltip
    let x, y, width, height;
    (0, react_1.useEffect)(() => {
        var _a;
        //reference to the computed tooltip this looks to a button element to properly move the tooltip appropriately above or below the button
        let target = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.parentNode.children[0].children[0];
        let new_style = tooltip_module_scss_1.default.tooltip_bottom;
        if (!(typeof target === 'undefined')) {
            x = target.clientLeft;
            y = target.clientTop;
            width = target.clientWidth;
            height = target.clientHeight;
            //Set an 8 pixel gap between the objects unless that would push it above the window
            new_style = y <= 8 + ref.current.clientHeight ? tooltip_module_scss_1.default.tooltip_bottom : tooltip_module_scss_1.default.tooltip_top;
        }
        ref.current.classList.add(new_style);
    });
    return (react_1.default.createElement("div", { ref: ref, className: tooltip_module_scss_1.default.tooltip, hidden: hidden, "aria-describedby": aria, role: "tooltip" }, text));
}
exports.Tooltip = Tooltip;
//# sourceMappingURL=tooltip.js.map
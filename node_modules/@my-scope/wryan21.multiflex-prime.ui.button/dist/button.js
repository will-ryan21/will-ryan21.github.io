"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const react_1 = __importDefault(require("react"));
const button_module_scss_1 = __importDefault(require("./button.module.scss"));
require("./button.css");
const ui_icon_1 = require("@my-scope/ui.icon");
const ui_tooltip_1 = require("@my-scope/ui.tooltip");
/*
*
*/
function Button(_a) {
    var { text = '', icon = '', variance = 'filled', disabled = false, disabledMsg = "", buttonType = "button", onclick, tabIndex = 0 } = _a, rest = __rest(_a, ["text", "icon", "variance", "disabled", "disabledMsg", "buttonType", "onclick", "tabIndex"]);
    /*
    * Core on the disabled tooltip
    */
    function setDiabledTooltip(event) {
        if (disabledMsg) {
            const tt = event.currentTarget.parentNode.children[1];
            if (tt.hasAttribute("hidden"))
                tt.removeAttribute("hidden");
        }
    }
    /*
    * Core off the disabled tooltip
    */
    function removeDiabledTooltip(event) {
        if (disabledMsg) {
            const tt = event.currentTarget.parentNode.children[1];
            tt.setAttribute("hidden", "hidden");
        }
    }
    /*
    * correctly routes the click as necessary
    */
    function routeClick(event) {
        createRipple(event);
        //if there is an onClick to execute
        if (onclick) {
            onclick();
        }
    }
    /*
    * function to add a ripple upon press
    */
    function createRipple(event) {
        const button = event.currentTarget.children[0];
        // ripple icon
        const circle = document.createElement("span");
        //calculate max width for ripple
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        //set circle size, position, and style specified in button.css
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `0px`;
        circle.style.top = `${-1 * (button.clientHeight / 2)}px`;
        circle.classList.add("ripple");
        //once added and animated, remove it
        const ripple = button.getElementsByClassName("ripple")[0];
        if (ripple) {
            ripple.remove();
        }
        button.appendChild(circle);
    }
    //set button color based on button variety
    var color = button_module_scss_1.default["brand-white"];
    if (!disabled) {
        if (variance == "ghost")
            color = button_module_scss_1.default["brand-primary"];
        else
            color = button_module_scss_1.default["brand-white"];
    }
    else {
        color = button_module_scss_1.default["brand-disabled"];
    }
    //set the button styling for icons
    const iconStyle = {
        paddingRight: button_module_scss_1.default["pad-icon"],
        paddingLeft: button_module_scss_1.default["pad-icon"]
    };
    const noStyle = {};
    let styleSelector = noStyle;
    if (text == "")
        styleSelector = iconStyle;
    //create a unique ID
    function uniqueID() {
        return Math.random().toString() + Math.random().toString() + Math.random().toString() + Math.random().toString();
    }
    let btnID = "button__" + uniqueID();
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("span", { className: button_module_scss_1.default.disabledStyler, "child-disabled": disabled && disabledMsg != "" ? 'true' : 'false', onClick: routeClick, onFocus: setDiabledTooltip, onMouseOver: setDiabledTooltip, onBlur: removeDiabledTooltip, onMouseOut: removeDiabledTooltip, tabIndex: disabled && disabledMsg != "" ? tabIndex : -1 },
            react_1.default.createElement("button", Object.assign({ className: button_module_scss_1.default.button, style: styleSelector, "data-variation": variance, type: buttonType, disabled: disabled, tabIndex: tabIndex, id: btnID }, rest),
                react_1.default.createElement("span", { className: button_module_scss_1.default.label },
                    react_1.default.createElement(ui_icon_1.Icon, { id: icon, color: color }),
                    " ",
                    text))),
        (disabledMsg != "") ? react_1.default.createElement(ui_tooltip_1.Tooltip, { text: disabledMsg, hidden: true, aria: btnID }) : null));
}
exports.Button = Button;
//# sourceMappingURL=button.js.map